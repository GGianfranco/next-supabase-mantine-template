/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/api_usage_records": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.api_usage_records.id"];
          called_by?: parameters["rowFilter.api_usage_records.called_by"];
          called_at?: parameters["rowFilter.api_usage_records.called_at"];
          api_name?: parameters["rowFilter.api_usage_records.api_name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["api_usage_records"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** api_usage_records */
          api_usage_records?: definitions["api_usage_records"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.api_usage_records.id"];
          called_by?: parameters["rowFilter.api_usage_records.called_by"];
          called_at?: parameters["rowFilter.api_usage_records.called_at"];
          api_name?: parameters["rowFilter.api_usage_records.api_name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.api_usage_records.id"];
          called_by?: parameters["rowFilter.api_usage_records.called_by"];
          called_at?: parameters["rowFilter.api_usage_records.called_at"];
          api_name?: parameters["rowFilter.api_usage_records.api_name"];
        };
        body: {
          /** api_usage_records */
          api_usage_records?: definitions["api_usage_records"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/foods": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.foods.id"];
          user_id?: parameters["rowFilter.foods.user_id"];
          updated_at?: parameters["rowFilter.foods.updated_at"];
          name?: parameters["rowFilter.foods.name"];
          image_url?: parameters["rowFilter.foods.image_url"];
          rating?: parameters["rowFilter.foods.rating"];
          is_public?: parameters["rowFilter.foods.is_public"];
          description?: parameters["rowFilter.foods.description"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["foods"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** foods */
          foods?: definitions["foods"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.foods.id"];
          user_id?: parameters["rowFilter.foods.user_id"];
          updated_at?: parameters["rowFilter.foods.updated_at"];
          name?: parameters["rowFilter.foods.name"];
          image_url?: parameters["rowFilter.foods.image_url"];
          rating?: parameters["rowFilter.foods.rating"];
          is_public?: parameters["rowFilter.foods.is_public"];
          description?: parameters["rowFilter.foods.description"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.foods.id"];
          user_id?: parameters["rowFilter.foods.user_id"];
          updated_at?: parameters["rowFilter.foods.updated_at"];
          name?: parameters["rowFilter.foods.name"];
          image_url?: parameters["rowFilter.foods.image_url"];
          rating?: parameters["rowFilter.foods.rating"];
          is_public?: parameters["rowFilter.foods.is_public"];
          description?: parameters["rowFilter.foods.description"];
        };
        body: {
          /** foods */
          foods?: definitions["foods"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/profiles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
          email?: parameters["rowFilter.profiles.email"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profiles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
          email?: parameters["rowFilter.profiles.email"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
          email?: parameters["rowFilter.profiles.email"];
        };
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  api_usage_records: {
    /** Format: integer */
    id: number;
    /** Format: uuid */
    called_by: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    called_at: string;
    /** Format: text */
    api_name: string;
  };
  foods: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: uuid */
    user_id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    name: string;
    /** Format: text */
    image_url?: string;
    /** Format: integer */
    rating?: number;
    /**
     * Format: boolean
     * @default false
     */
    is_public: boolean;
    /** Format: text */
    description?: string;
  };
  profiles: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    username?: string;
    /** Format: text */
    avatar_url?: string;
    /** Format: text */
    website?: string;
    /** Format: text */
    email: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description api_usage_records */
  "body.api_usage_records": definitions["api_usage_records"];
  /** Format: integer */
  "rowFilter.api_usage_records.id": string;
  /** Format: uuid */
  "rowFilter.api_usage_records.called_by": string;
  /** Format: timestamp with time zone */
  "rowFilter.api_usage_records.called_at": string;
  /** Format: text */
  "rowFilter.api_usage_records.api_name": string;
  /** @description foods */
  "body.foods": definitions["foods"];
  /** Format: integer */
  "rowFilter.foods.id": string;
  /** Format: uuid */
  "rowFilter.foods.user_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.foods.updated_at": string;
  /** Format: text */
  "rowFilter.foods.name": string;
  /** Format: text */
  "rowFilter.foods.image_url": string;
  /** Format: integer */
  "rowFilter.foods.rating": string;
  /** Format: boolean */
  "rowFilter.foods.is_public": string;
  /** Format: text */
  "rowFilter.foods.description": string;
  /** @description profiles */
  "body.profiles": definitions["profiles"];
  /** Format: uuid */
  "rowFilter.profiles.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.profiles.updated_at": string;
  /** Format: text */
  "rowFilter.profiles.username": string;
  /** Format: text */
  "rowFilter.profiles.avatar_url": string;
  /** Format: text */
  "rowFilter.profiles.website": string;
  /** Format: text */
  "rowFilter.profiles.email": string;
}

export interface operations {}

export interface external {}
